ion: "3"

description: Taskfile for port-forwarding the otel-demo frontend-proxy service.

vars:
  WORK_DIR: "{{ .ROOT_DIR }}/work_dir"
  CLUSTER:
    sh: |
      if {{ .KUBECTL_CMD }} cluster-info >/dev/null 2>&1; then
        echo true
      else
        echo false
      fi
  DICE_PORT_GO:
    sh: |
      {{ if eq .CLUSTER "true" }} {{ .KUBECTL_CMD }} --namespace otel-demo --output yaml get svc dice-go | yq '.spec.ports[] | .nodePort' {{ end }}
  DICE_PORT_JAVA:
    sh: |
      {{ if eq .CLUSTER "true" }} {{ .KUBECTL_CMD }} --namespace otel-demo --output yaml get svc dice-java | yq '.spec.ports[] | .nodePort' {{ end }}

includes:
  tools:
    desc: Install required tools (k3d, kubectl, kind).
    taskfile: ./tools.yaml
    internal: true
  istio:
    desc: Install and manage Istio in the local cluster.
    taskfile: ./istio.yaml
    internal: true

tasks:
  install:
    desc: Install a simple setup of otel-collector and otel-collector-sink in the local cluster.
    run: once
    deps:
      - task: tools:install-kubectl
      - task: demo-delete
    requires:
      vars: [KUBECTL_CMD]
    preconditions:
      - sh: "{{ .KUBECTL_CMD }} cluster-info >/dev/null 2>&1"
        msg: "Please ensure that you have a k8s-cluster running. Try:\ttask cluster:start"
    cmds:
      - "{{ .HELM_CMD }} uninstall audit-log-sink --namespace otel-demo --ignore-not-found"
      - "{{ .KUBECTL_CMD }} apply --filename kubectl/namespace.yaml"
      - "{{ .KUBECTL_CMD }} apply --filename kubectl/log-sink.yaml"
      - "{{ .KUBECTL_CMD }} rollout restart deployment/log-sink -n otel-demo"
      - "{{ .KUBECTL_CMD }} wait --for=condition=available --timeout=120s deployment/log-sink -n otel-demo"
      - "{{ .KUBECTL_CMD }} apply --filename kubectl/collector.yaml"
      - "{{ .KUBECTL_CMD }} rollout restart deployment/collector -n otel-demo"

  deploy-dice-go:
    desc: Deploy dice-go app in the local cluster.
    deps:
      - task: tools:install-kubectl
    requires:
      vars: [KUBECTL_CMD, NODE_IP, DICE_PORT_GO]
    preconditions:
      - sh: "{{ .KUBECTL_CMD }} cluster-info >/dev/null 2>&1"
        msg: "Please ensure that you have a k8s-cluster running. Try:\ttask cluster:start"
    cmds:
      - "{{ .KUBECTL_CMD }} apply --filename kubectl/namespace.yaml"
      - "{{ .KUBECTL_CMD }} apply --filename kubectl/dice-go.yaml"
      - "{{ .KUBECTL_CMD }} rollout restart deployment/dice-go -n otel-demo"
      - echo export DICE_URL_GO="http://{{ .NODE_IP }}:{{ .DICE_PORT_GO }}/rolldice/$USER"

  deploy-dice-java:
    desc: Deploy dice-java app in the local cluster.
    deps:
      - task: tools:install-kubectl
    requires:
      vars: [KUBECTL_CMD, NODE_IP, DICE_PORT_JAVA]
    preconditions:
      - sh: "{{ .KUBECTL_CMD }} cluster-info >/dev/null 2>&1"
        msg: "Please ensure that you have a k8s-cluster running. Try:\ttask cluster:start"
    cmds:
      - "{{ .KUBECTL_CMD }} apply --filename kubectl/namespace.yaml"
      - "{{ .KUBECTL_CMD }} apply --filename kubectl/dice-java.yaml"
      - "{{ .KUBECTL_CMD }} rollout restart deployment/dice-java -n otel-demo"
      - echo export DICE_URL_JAVA="http://{{ .NODE_IP }}:{{ .DICE_PORT_JAVA }}/rolldice/$USER"

  throw-dice:
    desc: Throw a dice using the dice-go or dice-java app.
    requires:
      vars: [NODE_IP, DICE_PORT_GO, DICE_PORT_JAVA]
    deps:
      - task: deploy-dice-go
      - task: deploy-dice-java
    cmds:
      - curl -s "http://{{ .NODE_IP }}:{{ .DICE_PORT_GO }}/rolldice/$USER"
      - curl -s "http://{{ .NODE_IP }}:{{ .DICE_PORT_JAVA }}/rolldice/$USER"
