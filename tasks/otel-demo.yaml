version: "3"

description: Taskfile for port-forwarding the otel-demo frontend-proxy service.

vars:
  OTEL_DEMO_NS: "otel-demo"

includes:
  tools:
    desc: Install required tools (k3d, kubectl, kind).
    taskfile: ./tools.yaml
    internal: true
  istio:
    desc: Install and manage Istio in the local cluster.
    taskfile: ./istio.yaml
    internal: true

tasks:
  install:
    desc: Install otel-demo in the local cluster.
    run: once
    deps:
      - task: tools:install-helm
      - task: istio:install
      - task: create-namespace
    requires:
      vars: [HELM_CMD, OTEL_DEMO_NS]
    preconditions:
      - sh: "{{ .KUBECTL_CMD }} cluster-info >/dev/null 2>&1"
        msg: "Please ensure that you have a k8s-cluster running. Try:\ttask cluster:start"
    status:
      - "{{ .HELM_CMD }} list --namespace {{ .OTEL_DEMO_NS }} -o json | jq -r '.[].status' | grep -q deployed"
    cmds:
      - "{{ .HELM_CMD }} repo add open-telemetry https://open-telemetry.github.io/opentelemetry-helm-charts >/dev/null 2>&1"
      - "{{ .HELM_CMD }} install --values helm/otel-demo-overrides.yaml my-otel-demo open-telemetry/opentelemetry-demo -n {{ .OTEL_DEMO_NS }}"
      - "{{ .KUBECTL_CMD }} apply -f kubectl/istio-otelcol-fault-injection.yaml"
      - "{{ .KUBECTL_CMD }} apply -f kubectl/istio-permissive-mtls.yaml"

  upgrade:
    desc: Upgrade otel-demo in the local cluster.
    run: once
    deps:
      - task: tools:install-helm
      - task: create-namespace
    requires:
      vars: [HELM_CMD, OTEL_DEMO_NS]
    cmds:
      - "{{ .HELM_CMD }} upgrade --install --values helm/otel-demo-overrides.yaml my-otel-demo open-telemetry/opentelemetry-demo -n {{ .OTEL_DEMO_NS }}"
      - "{{ .KUBECTL_CMD }} apply -f kubectl/istio-otelcol-fault-injection.yaml"
      - "{{ .KUBECTL_CMD }} apply -f kubectl/istio-permissive-mtls.yaml"

  status:
    desc: Check the status of otel-demo in the local cluster.
    deps:
      - task: install
    requires:
      vars: [HELM_CMD, OTEL_DEMO_NS]
    cmds:
      - "{{ .HELM_CMD }} status -n {{ .OTEL_DEMO_NS }} my-otel-demo"

  uninstall:
    desc: Delete otel-demo from the local cluster.
    deps:
      - task: tools:install-helm
    requires:
      vars: [HELM_CMD, OTEL_DEMO_NS]
    status:
      - "! {{ .HELM_CMD }} list --namespace {{ .OTEL_DEMO_NS }} | grep -q my-otel-demo"
    cmds:
      - "{{ .HELM_CMD }} uninstall my-otel-demo -n {{ .OTEL_DEMO_NS }} --ignore-not-found"
      - "{{ .KUBECTL_CMD }} delete -f kubectl/istio-otelcol-fault-injection.yaml"
      - "{{ .KUBECTL_CMD }} delete -f kubectl/istio-permissive-mtls.yaml"

  create-namespace:
    desc: Create the otel-demo namespace if it doesn't exist.
    requires:
      vars: [KUBECTL_CMD, OTEL_DEMO_NS]
    status:
      - "{{ .KUBECTL_CMD }} get ns {{ .OTEL_DEMO_NS }} >/dev/null 2>&1"
    cmds:
      - "{{ .KUBECTL_CMD }} create ns {{ .OTEL_DEMO_NS }} --dry-run=client -o yaml | {{ .KUBECTL_CMD }} apply -f -"

  port-forward:
    desc: Port-forward the otel-demo frontend-proxy service to localhost:8080.
    deps:
      - task: install
      - task: tools:install-kubectl
    requires:
      vars: [KUBECTL_CMD, OTEL_DEMO_NS]
    preconditions:
      - sh: "{{ .KUBECTL_CMD }} get svc/frontend-proxy -n {{ .OTEL_DEMO_NS }} >/dev/null 2>&1"
      - sh: "{{ .KUBECTL_CMD }} get pods -n {{ .OTEL_DEMO_NS }} --field-selector=status.phase=Running | grep -q frontend-proxy"
        msg: "Please wait for the frontend-proxy pod to be in Running state."
    cmds:
      - "{{ .KUBECTL_CMD }} -n {{ .OTEL_DEMO_NS }} port-forward svc/frontend-proxy 8080:8080"

  tweak-config:
    desc: Tweak the otel-collector configuration in the otel-demo namespace.
    deps:
      - task: misc::create-work-dir
      - task: install
      - task: tools:install-kubectl
    requires:
      vars: [KUBECTL_CMD, OTEL_DEMO_NS]
    cmds:
      - "{{ .KUBECTL_CMD }} get configmap otel-collector -n {{ .OTEL_DEMO_NS }} -o yaml > {{ .WORK_DIR }}/otel-collector-configmap.yaml"
      - "{{ .KUBECTL_CMD }} get service otel-collector -n {{ .OTEL_DEMO_NS }} -o yaml > {{ .WORK_DIR }}/otel-collector-service.yaml"
      - yq eval '.data.relay = load_str(\"{{ .ROOT_DIR }}/otel-collector/config.yaml\")' {{ .WORK_DIR }}/otel-collector-configmap.yaml > {{ .WORK_DIR }}/otel-collector-configmap-new.yaml
      - yq eval '.spec.ports |= map(select(.name == \"otlp\" or .name == \"otlp-http\"))' {{ .WORK_DIR }}/otel-collector-service.yaml > {{ .WORK_DIR }}/otel-collector-service-new.yaml
      - "{{ .KUBECTL_CMD }} apply -f {{ .WORK_DIR }}/otel-collector-configmap-new.yaml -n {{ .OTEL_DEMO_NS }}"
      - "{{ .KUBECTL_CMD }} apply -f {{ .WORK_DIR }}/otel-collector-service-new.yaml -n {{ .OTEL_DEMO_NS }}"
      - "{{ .KUBECTL_CMD }} rollout restart deployment/otel-collector -n {{ .OTEL_DEMO_NS }}"

  busybox:
    desc: Run a busybox container in the otel-demo namespace.
    deps:
      - task: tools:install-kubectl
    requires:
      vars: [KUBECTL_CMD]
    cmds:
      - "{{ .KUBECTL_CMD }} run run -it --rm --restart=Never --namespace otel-demo --image=busybox -- sh"

  alpine-sidecar:
    desc: Run a
    deps:
      - task: tools:install-kubectl
    requires:
      vars: [KUBECTL_CMD]
    cmds:
      - "{{ .KUBECTL_CMD }} exec -it $({{ .KUBECTL_CMD }} get pods --namespace otel-demo --field-selector=status.phase=Running -o name | grep otel-collector) -c alpine-sidecar --namespace otel-demo -- /bin/sh"
